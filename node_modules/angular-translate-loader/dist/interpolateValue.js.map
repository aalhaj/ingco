{"version":3,"sources":["../src/interpolateValue.js"],"names":["INTERPOLATIONS","context","resourcePath","replace","value","loaderContext","content","options","interpolateName","regExp","name","interpolation","regexp","RegExp"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;AAKA;;AAKA;;;;;;AAEA;;;;AAIA,IAAMA,iBAAiB;AACnB;;;;;;AAMA,aAAS,aAACC,OAAD,EAAUC,YAAV;AAAA,eAA2B,kBAAK,mBAAQ,mBAAQA,YAAR,EAAsBC,OAAtB,CAA8B,mBAAQF,OAAR,CAA9B,EAAgD,EAAhD,CAAR,CAAL,YAA3B;AAAA;AAPU,CAAvB;;AAUA;;;;;;;;kBAOe,UAACG,KAAD,EAAQC,aAAR,EAAuBC,OAAvB,EAAgCC,OAAhC,EAA4C;AACvD,QAAMN,UAAUM,QAAQN,OAAR,IAAmBI,cAAcE,OAAd,CAAsBN,OAAzC,IAAoD,IAApE;;AAEAG,YAAQ,sBAAYI,eAAZ,CAA4BH,aAA5B,EAA2CD,KAA3C,EAAkD;AACtDH,iBAASA,OAD6C;AAEtDK,iBAAS,sBAASA,OAAT,IAAoB,yBAAeA,OAAf,CAApB,GAA8CA,OAFD;AAGtDG,gBAAQF,QAAQE;AAHsC,KAAlD,CAAR;;AAHuD;AAAA;AAAA;;AAAA;AASvD,wDAAoC,uBAAeT,cAAf,CAApC,4GAAoE;AAAA;;AAAA,gBAAxDU,IAAwD;AAAA,gBAAlDC,aAAkD;;AAChE,gBAAMC,SAAS,IAAIC,MAAJ,CAAW,0BAAaH,IAAb,CAAX,EAA+B,GAA/B,CAAf;;AAEAN,oBAAQA,MAAMD,OAAN,CAAcS,MAAd,EAAsBD,cAAcV,OAAd,EAAuBI,cAAcH,YAArC,CAAtB,CAAR;AACH;AAbsD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAevD,WAAOE,KAAP;AACH,C","file":"interpolateValue.js","sourcesContent":["import {\n    isObject,\n    escapeRegExp,\n    trim\n} from 'lodash';\nimport {\n    sep,\n    dirname,\n    resolve\n} from 'path';\nimport loaderUtils from 'loader-utils';\n\n/**\n * @private\n * @type {Object<String,Function>}\n */\nconst INTERPOLATIONS = {\n    /**\n     * @private\n     * @param {String} context\n     * @param {String} resourcePath\n     * @returns {String}\n     */\n    '[dir]': (context, resourcePath) => trim(dirname(resolve(resourcePath).replace(resolve(context), '')), sep)\n};\n\n/**\n * @param {String} value\n * @param {*} loaderContext\n * @param {*} content\n * @param {Object} options\n * @returns {String}\n */\nexport default (value, loaderContext, content, options) => {\n    const context = options.context || loaderContext.options.context || './';\n\n    value = loaderUtils.interpolateName(loaderContext, value, {\n        context: context,\n        content: isObject(content) ? JSON.stringify(content) : content,\n        regExp: options.regExp\n    });\n\n    for (const [name, interpolation] of Object.entries(INTERPOLATIONS)) {\n        const regexp = new RegExp(escapeRegExp(name), 'g');\n\n        value = value.replace(regexp, interpolation(context, loaderContext.resourcePath));\n    }\n\n    return value;\n};\n"]}