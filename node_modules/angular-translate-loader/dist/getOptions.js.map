{"version":3,"sources":["../src/getOptions.js"],"names":["CONFIG_KEY","toRegExp","RegExp","str","getLocaleInterpolate","localeInterpolate","options","Array","isArray","map","x","getLoaderConfig","loaderContext"],"mappings":";;;;;;AAAA;;AAOA;;;;AACA;;;;;;AAEA;;;;AAIA,IAAMA,aAAa,uBAAU,mBAAV,CAAnB;;AAEA;;;;;AAKA,IAAMC,WAAW,SAAXA,QAAW;AAAA,WAAO,IAAIC,MAAJ,CAAW,0BAAaC,GAAb,CAAX,CAAP;AAAA,CAAjB;;AAEA;;;;;AAKA,IAAMC,uBAAuB,SAAvBA,oBAAuB,UAAW;AACpC,QAAIC,oBAAoBC,QAAQD,iBAAhC;;AAEA,QAAI,sBAASC,QAAQD,iBAAjB,CAAJ,EAAyC;AACrCA,4BAAoB,CAChBC,QAAQD,iBADQ,CAApB;AAGH,KAJD,MAIO,IAAI,sBAASC,QAAQD,iBAAjB,CAAJ,EAAyC;AAC5CA,4BAAoB,CAChBC,QAAQD,iBADQ,CAApB;AAGH;;AAED,QAAIE,MAAMC,OAAN,CAAcH,iBAAd,CAAJ,EAAsC;AAClCA,4BAAoBA,kBAAkBI,GAAlB,CAAsB;AAAA,mBAAK,sBAASC,CAAT,IAAcA,CAAd,GAAkBT,SAASS,CAAT,CAAvB;AAAA,SAAtB,CAApB;AACH;;AAED,WAAOL,iBAAP;AACH,CAlBD;;AAoBA;;;;;kBAIe,yBAAiB;AAC5B,QAAMC,UAAU,sBAAYK,eAAZ,CAA4BC,aAA5B,EAA2CZ,UAA3C,CAAhB;;AAEAM,YAAQD,iBAAR,GAA4BD,qBAAqBE,OAArB,CAA5B;;AAEA,WAAO,sBAASA,OAAT,2BAAP;AACH,C","file":"getOptions.js","sourcesContent":["import {\n    defaults,\n    camelCase,\n    isString,\n    isRegExp,\n    escapeRegExp\n} from 'lodash';\nimport loaderUtils from 'loader-utils';\nimport DEFAULT_OPTIONS from './defaultOptions';\n\n/**\n * @private\n * @type {String}\n */\nconst CONFIG_KEY = camelCase('angular-translate');\n\n/**\n * @private\n * @param {String} str\n * @returns {RegExp}\n */\nconst toRegExp = str => new RegExp(escapeRegExp(str));\n\n/**\n * @private\n * @param {Object} options\n * @returns {RegExp[]}\n */\nconst getLocaleInterpolate = options => {\n    let localeInterpolate = options.localeInterpolate;\n\n    if (isString(options.localeInterpolate)) {\n        localeInterpolate = [\n            options.localeInterpolate\n        ];\n    } else if (isRegExp(options.localeInterpolate)) {\n        localeInterpolate = [\n            options.localeInterpolate\n        ];\n    }\n\n    if (Array.isArray(localeInterpolate)) {\n        localeInterpolate = localeInterpolate.map(x => isRegExp(x) ? x : toRegExp(x));\n    }\n\n    return localeInterpolate;\n};\n\n/**\n * @param {*} loaderContext\n * @returns {Object}\n */\nexport default loaderContext => {\n    const options = loaderUtils.getLoaderConfig(loaderContext, CONFIG_KEY);\n\n    options.localeInterpolate = getLocaleInterpolate(options);\n\n    return defaults(options, DEFAULT_OPTIONS);\n};\n"]}