{"version":3,"sources":["../src/interpolateOptionsValue.js"],"names":["key","loaderContext","content","options","value","Array","isArray","join","sep"],"mappings":";;;;;;AAAA;;AAGA;;;;;;AAEA;;;;;;;;kBAQe,UAACA,GAAD,EAAMC,aAAN,EAAqBC,OAArB,EAA8BC,OAA9B,EAA0C;AACrD,QAAIC,QAAQD,QAAQH,GAAR,CAAZ;;AAEA,QAAIK,MAAMC,OAAN,CAAcF,KAAd,CAAJ,EAA0B;AACtBA,gBAAQA,MAAMG,IAAN,CAAWJ,QAAQK,GAAnB,CAAR;AACH;;AAED,QAAI,CAAC,qBAAQJ,KAAR,CAAL,EAAqB;AACjBA,gBAAQ,gCAAiBA,KAAjB,EAAwBH,aAAxB,EAAuCC,OAAvC,EAAgDC,OAAhD,CAAR;AACH;;AAED,WAAOC,KAAP;AACH,C","file":"interpolateOptionsValue.js","sourcesContent":["import {\n    isEmpty\n} from 'lodash';\nimport interpolateValue from './interpolateValue';\n\n/**\n * @private\n * @param {String} key\n * @param {*} loaderContext\n * @param {*} content\n * @param {Object} options\n * @returns {String}\n */\nexport default (key, loaderContext, content, options) => {\n    let value = options[key];\n\n    if (Array.isArray(value)) {\n        value = value.join(options.sep);\n    }\n\n    if (!isEmpty(value)) {\n        value = interpolateValue(value, loaderContext, content, options);\n    }\n\n    return value;\n};\n"]}