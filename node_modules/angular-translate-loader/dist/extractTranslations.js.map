{"version":3,"sources":["../src/extractTranslations.js"],"names":["MODULE_EXPORTS","loaderContext","content","options","translations","Array","isArray","inputValue","value","JSON","parse","test","match","length","toString","parseString","namespaces","key"],"mappings":";;;;;;AAAA;;AAKA;;;;AACA;;;;;;AAEA;;;;AAIA,IAAMA,iBAAiB,0CAAvB;;AAEA;;;;;;;kBAMe,UAACC,aAAD,EAAgBC,OAAhB,EAAyBC,OAAzB,EAAqC;AAChD,QAAIC,qBAAJ;;AAEA,QAAIC,MAAMC,OAAN,CAAcL,cAAcM,UAA5B,CAAJ,EAA6C;AACzCH,uBAAeH,cAAcM,UAAd,CAAyB,CAAzB,CAAf;AACH,KAFD,MAEO,IAAI,sBAASN,cAAcO,KAAvB,CAAJ,EAAmC;AACtCJ,uBAAeK,KAAKC,KAAL,CAAWT,cAAcO,KAAzB,CAAf;AACH,KAFM,MAEA,IAAIR,eAAeW,IAAf,CAAoBT,OAApB,CAAJ,EAAkC;AACrC,YAAMU,QAAQV,QAAQU,KAAR,CAAcZ,cAAd,CAAd;AAAA,YACIQ,QAAQI,MAAMC,MAAN,IAAgB,CAAhB,GAAoBD,MAAM,CAAN,EAASE,QAAT,EAApB,GAA0C,IADtD;;AAGAV,uBAAeK,KAAKC,KAAL,CAAW,sBAAYK,WAAZ,CAAwBP,KAAxB,CAAX,CAAf;AACH,KALM,MAKA;AACHJ,uBAAeF,OAAf;AACH;;AAED,QAAI,CAAC,sBAASE,YAAT,CAAL,EAA6B;AACzBA,uBAAe,EAAf;AACH;;AAED,QAAMY,aAAa,qCAAsBf,aAAtB,EAAqCG,YAArC,EAAmDD,OAAnD,CAAnB;;AAEA,WAAO,qBAAQC,YAAR,EAAsB,UAACI,KAAD,EAAQS,GAAR;AAAA,eAAgBD,aAAaC,GAA7B;AAAA,KAAtB,CAAP;AACH,C","file":"extractTranslations.js","sourcesContent":["import {\n    isObject,\n    isString,\n    mapKeys\n} from 'lodash';\nimport loaderUtils from 'loader-utils';\nimport interpolateNamespaces from './interpolateNamespaces';\n\n/**\n * @private\n * @type {RegExp}\n */\nconst MODULE_EXPORTS = /module\\.exports\\s?=\\s?({[\\s\\S\\n\\t]+?});?/;\n\n/**\n * @param {*} loaderContext\n * @param {String} content\n * @param {Object} options\n * @returns {Object}\n */\nexport default (loaderContext, content, options) => {\n    let translations;\n\n    if (Array.isArray(loaderContext.inputValue)) {\n        translations = loaderContext.inputValue[0];\n    } else if (isString(loaderContext.value)) {\n        translations = JSON.parse(loaderContext.value);\n    } else if (MODULE_EXPORTS.test(content)) {\n        const match = content.match(MODULE_EXPORTS),\n            value = match.length >= 1 ? match[1].toString() : '{}';\n\n        translations = JSON.parse(loaderUtils.parseString(value));\n    } else {\n        translations = content;\n    }\n\n    if (!isObject(translations)) {\n        translations = {};\n    }\n\n    const namespaces = interpolateNamespaces(loaderContext, translations, options);\n\n    return mapKeys(translations, (value, key) => namespaces + key);\n};\n"]}